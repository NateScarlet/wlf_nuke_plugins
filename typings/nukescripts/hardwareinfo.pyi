"""
This type stub file was generated by pyright.
"""

def RunCmdWithTimeout(cmd, timeout):
  ...

def ConvertUnits(s, token, multiplier):
  ...

def ConvertSpeedUnitsToMhZ(s):
  ...

def ConvertMemSizeToKb(s):
  ...

gCPUSpeed = "CPUSpeed_Mhz"
gMachineName = "MachineName"
gNumCPUs = "NumCPUs"
gNumCores = "NumCores"
gRAM = "RAM_Kb"
gCPUType = "CPUType"
gOS = "OS"
gBusSpeed = "BusSpeed"
gL2Cache = "L2Cache_Kb"
gOSVersion = "OSVersion"
gKernelVersion = "KernelVersion"
class HardwareInfo:
  def __init__(self) -> None:
    ...
  
  def SafeCall(self, f, *positional, **keyword):
    ...
  
  def testCatCommand(self, info):
    ...
  
  def parseProcInfo(self, info):
    ...
  
  def parseProcInfoStr(self, cpuinfo):
    ...
  
  def parseCPUInfo(self):
    ...
  
  def ParseProcVersion(self):
    ...
  
  def parseProcSimple(self, file, entry):
    ...
  
  def parseMemInfo(self):
    ...
  
  def initLinux(self):
    ...
  
  def getRegistryNumSubKeys(self, key, subkey):
    ...
  
  def getRegistryValue(self, key, subkey, value):
    ...
  
  def getWindowsRam(self):
    ...
  
  def RunCmdWin(cmd):
    ...
  
  def getWindowsL2Cache(self):
    ...
  
  def getWindowsOSVersion(self):
    ...
  
  def getWindowsMachineName(self):
    ...
  
  def initWin(self):
    ...
  
  def MapDictionaries(self, originalDict, addTo, mapping, name):
    ...
  
  def initMac(self):
    """Initialises the object for mac - relies on system_profiler being in the path"""
    ...
  
  def initMacHardware(self, itemDicts):
    ...
  
  def initMacSoftware(self, itemDicts):
    ...
  
  def printDict(self, pDict, handle, indentLevel=...):
    """
    outputs the elements from pDict in XML structure, nesting when an
    element contains another dict
    """
    ...
  
  def printXML(self, file, indentLevel=...):
    ...
  


def PrintMachineInfoToFile(file, indentLevel=...):
  ...

