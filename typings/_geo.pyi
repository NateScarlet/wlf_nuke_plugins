# -*- coding=UTF-8 -*-
# This typing file was generated by typing_from_help.py
"""
_geo - The python API for Nuke's core 3D geometry classes.
"""

import six
import typing

class AttrGroup:
    """
    The available attribute groups. Use these in conjunction with the Attribute and AttribContext methods.
    """

    ...

class AttrType:
    """
    The available attribute types. Used by the Attribute and AttribContext classes. Note that we don't support pointer attributes in python, although we do report their type.
    """

    ...

class AttribContext:
    """
    A set of selected items on a single of 3d object.
    """

    attribute: ...
    """
    The attribute itself.
    """

    channel: ...
    """
    The channel number for the underlying attribute.
    """

    group: ...
    """
    What this attribute applies to (points, vertices, faces, etc.).
    """

    name: ...
    """
    The name for the attribute.
    """

    recursive: ...
    """
    Boolean value to indicate whether or not the attribute is applied recursively.
    """

    type: ...
    """
    The type of the attribute values.
    """

    varying: ...
    """
    Boolean value to indicate whether or not the attribute varies.
    """

    def __delattr__(self, *args, **kwargs):
        """
        x.__delattr__('name') <==> del x.name
        """
        ...

    def __getattribute__(self, *args, **kwargs):
        """
        x.__getattribute__('name') <==> x.name
        """
        ...

    def __setattr__(self, *args, **kwargs):
        """
        x.__setattr__('name', value) <==> x.name = value
        """
        ...

    def empty(self) -> bool:
        """
        Whether this attribute is empty, i.e. contains no values, or not.
        """
        ...

    ...

class Attribute:
    """
    An attribute on a 3d object.
    """

    name: ...
    """
    The name for the attribute.
    """

    type: ...
    """
    The type of the attribute values.
    """

    def __delattr__(self, *args, **kwargs):
        """
        x.__delattr__('name') <==> del x.name
        """
        ...

    def __getattribute__(self, *args, **kwargs):
        """
        x.__getattribute__('name') <==> x.name
        """
        ...

    def __getitem__(self, *args, **kwargs):
        """
        x.__getitem__(y) <==> x[y]
        """
        ...

    def __len__(self, *args, **kwargs):
        """
        x.__len__() <==> len(x)
        """
        ...

    def __setattr__(self, *args, **kwargs):
        """
        x.__setattr__('name', value) <==> x.name = value
        """
        ...

    def invalid(self) -> bool:
        """
        Check whether the type for this attribute is valid (i.e. one of the known and supported types). This is equivalent to 'not self.valid()'
        """
        ...

    def valid(self) -> bool:
        """
        Check whether the type for this attribute is valid (i.e. one of the known and supported types).
        """
        ...

    ...

class GeoInfo:
    """
    A 3D object consisting of vertices and primitives built out of them.
    """

    def __delattr__(self, *args, **kwargs):
        """
        x.__delattr__('name') <==> del x.name
        """
        ...

    def __getattribute__(self, *args, **kwargs):
        """
        x.__getattribute__('name') <==> x.name
        """
        ...

    def __setattr__(self, *args, **kwargs):
        """
        x.__setattr__('name', value) <==> x.name = value
        """
        ...

    def attribContext(self, name, group, type) -> AttribContext:
        """
        Gets an attribute context for the named attribute of this object. If the attribute doesn't exist, returns None.
        
        The group and type parameters are both optional. The group specifies what the attribute applies to; it can be any of:
          0  primitives
          1  vertices
          2  points
          3  object
          4  matrix
        
        The type parameter specifies the expected type of the object. It can be any of:
          0  float
          1  Vector2
          2  Vector3
          3  Vector4
          4  a normal vector (stored as a Vector3)
          5  int
          6  string
          7  std::string
          8  pointer
          9  Matrix3
          10 Matrix4
        """
        ...

    def normals(self) -> typing.List:
        """
        Gets the list of vertex normals for this object.
        """
        ...

    def points(self) -> PointList:
        """
        Gets the point list for this object.
        """
        ...

    def primitives(self) -> list of point index lists:
        """
        Gets the list of primitives which make up this object.
        """
        ...

    def transform(self) -> 4x4 tuple of floats:
        """
        Gets the transform matrix from the objects local coordinate system to world coordinates.
        """
        ...

    ...

class GeometryList:
    """
    A list of GeoInfo objects.
    """

    def __delattr__(self, *args, **kwargs):
        """
        x.__delattr__('name') <==> del x.name
        """
        ...

    def __getattribute__(self, *args, **kwargs):
        """
        x.__getattribute__('name') <==> x.name
        """
        ...

    def __getitem__(self, *args, **kwargs):
        """
        x.__getitem__(y) <==> x[y]
        """
        ...

    def __len__(self, *args, **kwargs):
        """
        x.__len__() <==> len(x)
        """
        ...

    def __setattr__(self, *args, **kwargs):
        """
        x.__setattr__('name', value) <==> x.name = value
        """
        ...

    ...

class PointList:
    """
    A list of points.
    
    Each point is represented as an (x,y,z) tuple of floats.
    """

    def __delattr__(self, *args, **kwargs):
        """
        x.__delattr__('name') <==> del x.name
        """
        ...

    def __getattribute__(self, *args, **kwargs):
        """
        x.__getattribute__('name') <==> x.name
        """
        ...

    def __getitem__(self, *args, **kwargs):
        """
        x.__getitem__(y) <==> x[y]
        """
        ...

    def __len__(self, *args, **kwargs):
        """
        x.__len__() <==> len(x)
        """
        ...

    def __setattr__(self, *args, **kwargs):
        """
        x.__setattr__('name', value) <==> x.name = value
        """
        ...

    ...

class Primitive:
    """
    The base class for geometric primitives in Nuke.
    """

    def __delattr__(self, *args, **kwargs):
        """
        x.__delattr__('name') <==> del x.name
        """
        ...

    def __getattribute__(self, *args, **kwargs):
        """
        x.__getattribute__('name') <==> x.name
        """
        ...

    def __setattr__(self, *args, **kwargs):
        """
        x.__setattr__('name', value) <==> x.name = value
        """
        ...

    def averageCenter(self, pointlist) -> typing.Tuple:
        """
        Get the average x,y,z location of all points in this primitive. The pointlist parameter should be the result of the points() method on the GeoInfo object which owns this primitive.
        """
        ...

    def faceAverageCenter(self, faceIndex, pointlist) -> typing.Tuple:
        """
        Get the average x,y,z location of all points in a particular face. The faceIndex parameter specifies which face to process. The pointlist parameter should be the result of the points() method on the GeoInfo object which owns this primitive.
        """
        ...

    def faceVertices(self, faceIndex) -> typing.List[int]:
        """
        Get the list of point indexes for a particular face. The faceIndex parameter specifies which face to process.
        """
        ...

    def faces(self) -> int:
        """
        Get the number of sub-faces this primitive generates.
        """
        ...

    def normal(self) -> typing.Tuple:
        """
        Get the normal for this primitive.
        """
        ...

    def points(self) -> typing.List[int]:
        """
        Get the list of point indexes for this primitive. The indexes refer to the position of the point in the point list of the GeoInfo object which owns this primitive.
        """
        ...

    ...

def bestFitPlane(*points) -> (_nukemath.Vector3, _nukemath.Vector3, _nukemath.Vector3):
    """
    Find the plane of best fit through a set of 3D points.
    
    @param points: The points to fit the plane through. Each point must be a  _nukemath.Vector3 object.
    @return: 3 non-collinear points on the plane, in a tuple.
    """
    ...


